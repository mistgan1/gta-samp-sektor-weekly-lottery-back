const express = require('express');
const cors = require('cors');
const fs = require('fs');
const path = require('path');

const app = express();
app.use(cors());
app.use(express.json());

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
const historyFilePath = path.join(__dirname, 'history.json');
const namesFilePath = path.join(__dirname, 'names.json');
const prizesFilePath = path.join(__dirname, 'prizes.json');

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
let history = [];
try {
    if (fs.existsSync(historyFilePath)) {
        history = JSON.parse(fs.readFileSync(historyFilePath, 'utf-8')) || [];
    }
} catch (error) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è history.json:', error);
    history = [];
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–æ–≤
let reservedNumbers = [];
try {
    if (fs.existsSync(namesFilePath)) {
        reservedNumbers = JSON.parse(fs.readFileSync(namesFilePath, 'utf-8')) || [];
    }
} catch (error) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è names.json:', error);
    reservedNumbers = [];
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
function saveHistory() {
    try {
        fs.writeFileSync(historyFilePath, JSON.stringify(history, null, 2), 'utf-8');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è history.json:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–æ–≤
function saveNames() {
    try {
        fs.writeFileSync(namesFilePath, JSON.stringify(reservedNumbers, null, 2), 'utf-8');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è names.json:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–≤—Ç–æ—Ä–Ω–∏–∫ –∏–ª–∏ —Å—É–±–±–æ—Ç–∞ –≤ 00:01 –ø–æ MSK)
function calculateNextDate() {
    const now = new Date();
    now.setHours(now.getHours() + 3); // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ MSK
    const dayOfWeek = now.getUTCDay();
    const targetDays = [2, 6]; // –í—Ç–æ—Ä–Ω–∏–∫ (2) –∏ –°—É–±–±–æ—Ç–∞ (6)

    let daysToAdd = targetDays.find(d => d > dayOfWeek) || (targetDays[0] + 7 - dayOfWeek);
    
    if (dayOfWeek === targetDays[0] || dayOfWeek === targetDays[1]) {
        if (now.getUTCHours() < 21 || (now.getUTCHours() === 21 && now.getUTCMinutes() < 1)) {
            daysToAdd = 0;
        }
    }

    now.setUTCDate(now.getUTCDate() + daysToAdd);
    now.setUTCHours(21, 1, 0, 0); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 00:01 MSK (21:01 UTC)

    return now;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∏—Å–ª–∞
function generateNumber() {
    const number = Math.floor(Math.random() * 100) + 1;
    const date = new Date().toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: 'numeric' }).replace(/\//g, '.');

    history.push({ date, number, name: "" });
    saveHistory();
    
    console.log(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–∏—Å–ª–æ: ${number}`);
    
    scheduleNextGeneration();
}

// –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
function scheduleNextGeneration() {
    nextDate = calculateNextDate();
    const delay = Math.max(nextDate.getTime() - Date.now(), 0);
    setTimeout(generateNumber, delay);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
function checkMissedGeneration() {
    if (new Date() >= nextDate) {
        generateNumber();
    } else {
        scheduleNextGeneration();
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
let nextDate = calculateNextDate();
checkMissedGeneration();

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
app.get('/log', (req, res) => {
    const logDir = path.join(__dirname, 'log'); // –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /log
    if (!fs.existsSync(logDir)) {
        return res.status(404).json({ success: false, message: '–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è /log –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    // –ß–∏—Ç–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /log
    const files = fs.readdirSync(logDir).filter(file => file.endsWith('.json'));
    res.json(files); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
app.get('/log/:filename', (req, res) => {
    const filename = req.params.filename; // –ò–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    const filePath = path.join(__dirname, 'log', filename); // –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É

    if (fs.existsSync(filePath)) {
        const fileContent = fs.readFileSync(filePath, 'utf-8');
        res.json(JSON.parse(fileContent)); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    } else {
        res.status(404).json({ success: false, message: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
});


// –ú–∞—Ä—à—Ä—É—Ç—ã API


app.get('/names', (req, res) => {
    res.json(reservedNumbers);
});

app.post('/reserve', (req, res) => {
    const { number, nickname } = req.body;
    if (!number) {
        return res.status(400).json({ success: false, message: '–ù–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω' });
    }

    reservedNumbers = reservedNumbers.filter(item => item.number !== number);

    if (nickname && nickname.trim() !== '') {
        reservedNumbers.push({ number, nickname });
    }

    saveNames();
    res.json({ success: true });
});

app.post('/update-winner', (req, res) => {
    const { date, number, name } = req.body;
    if (!date || !number) {
        return res.status(400).json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    }

    const winner = history.find(item => item.date === date && item.number === number);
    if (winner) {
        winner.name = name || '';
        saveHistory();
        res.json({ success: true });
    } else {
        res.status(404).json({ success: false, message: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
});

app.post('/auth', (req, res) => {
    const { password } = req.body;

    if (password === '1001') {
        res.json({ success: true });
    } else {
        res.status(401).json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–∑–æ–≤
app.get('/prizes', (req, res) => {
    try {
        if (fs.existsSync(prizesFilePath)) {
            const prizesData = JSON.parse(fs.readFileSync(prizesFilePath, 'utf-8'));
            res.json(prizesData);
        } else {
            res.status(404).json({ success: false, message: '–§–∞–π–ª —Å –ø—Ä–∏–∑–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è prizes.json:', error);
        res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.post('/add-history', (req, res) => {
    const { date, number, name } = req.body;

    if (!date || !number) {
        return res.status(400).json({ success: false, message: '–î–∞—Ç–∞ –∏ —á–∏—Å–ª–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    const newEntry = { date, number: Number(number), name: name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π" };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –∏—Å—Ç–æ—Ä–∏–∏
    history.push(newEntry);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    try {
        fs.writeFileSync(historyFilePath, JSON.stringify(history, null, 2), 'utf-8');
        res.json({ success: true, message: '–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ history.json:', error);
        res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.post('/update-prize', (req, res) => {
    const { prize, count } = req.body;

    if (!prize || count === undefined || isNaN(count) || count < 0) {
        return res.status(400).json({ success: false, message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    }

    // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤
    let prizes = [];
    try {
        if (fs.existsSync(prizesFilePath)) {
            prizes = JSON.parse(fs.readFileSync(prizesFilePath, 'utf-8')) || [];
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è prizes.json:', error);
        return res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }

    // –ò—â–µ–º –Ω—É–∂–Ω—ã–π –ø—Ä–∏–∑ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const prizeIndex = prizes.findIndex(p => p.prize === prize);
    if (prizeIndex !== -1) {
        prizes[prizeIndex].count = count;
    } else {
        return res.status(404).json({ success: false, message: '–ü—Ä–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    try {
        fs.writeFileSync(prizesFilePath, JSON.stringify(prizes, null, 2), 'utf-8');
        res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è prizes.json:', error);
        res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});


// üìÇ –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ (–≤—Å–µ–≥–¥–∞ —á–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞)
app.get('/history', async (req, res) => {
    try {
        if (fs.existsSync(historyFilePath)) {
            const history = JSON.parse(await fs.promises.readFile(historyFilePath, 'utf-8')) || [];
            res.json(history);
        } else {
            res.json([]); // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è history.json:', error);
        res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// üìÇ –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
app.post('/update-winner-prize', async (req, res) => {
    const { date, name, prize } = req.body;

    if (!date || !name) {
        return res.status(400).json({ success: false, message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    }

    try {
        let history = [];
        if (fs.existsSync(historyFilePath)) {
            history = JSON.parse(await fs.promises.readFile(historyFilePath, 'utf-8')) || [];
        }

        const winnerIndex = history.findIndex(item => item.date === date && item.name === name);
        if (winnerIndex !== -1) {
            history[winnerIndex].prize = prize || ""; // –ü–æ–∑–≤–æ–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        } else {
            return res.status(404).json({ success: false, message: '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // ‚úÖ –°—Ä–∞–∑—É –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º —Å–≤–µ–∂—É—é –∏—Å—Ç–æ—Ä–∏—é
        await fs.promises.writeFile(historyFilePath, JSON.stringify(history, null, 2), 'utf-8');

        console.log(`‚úÖ –ü—Ä–∏–∑ "${prize}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è ${name}`);

        // üöÄ –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const updatedHistory = JSON.parse(await fs.promises.readFile(historyFilePath, 'utf-8')) || [];
        res.json({ success: true, history: updatedHistory });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è history.json:', error);
        res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});



const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`));

